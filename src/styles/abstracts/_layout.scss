/*
  ========================================
  $Layout
  ========================================
*/

:root {
  --screen: 1024px;
  --screen-l: 1280px;
  --s-sm: clamp(0.5rem, calc(0.318rem + 0.909vw), 1rem);
  --s-base: clamp(1rem, calc(0.636rem + 1.818vw), 2rem);
  --s-md: clamp(1.5rem, calc(1.318rem + 0.909vw), 2rem);
  --s-lg: clamp(1.5rem, calc(0.955rem + 2.727vw), 3rem);
  --s-xl: clamp(2rem, calc(1.273rem + 3.636vw), 4rem);
  --s-xxl: clamp(3rem, calc(1.909rem + 5.455vw), 6rem);
}

/* $Global
   ==================================== */

html {
  height: 100%;
}

body {
  overflow-x: hidden;
  min-height: 100%;
  min-width: 300px;
  display: grid;
  //grid-template-rows: auto 1fr 115px minmax(0, 1fr);
  overscroll-behavior: none;
  margin: 0;
}

/* Set display: none on line reaks used as spacing
   prevent CMS users from using extra line breaks for spacing */
br + br {
  display: none;
}

header,
main,
section,
article,
aside,
footer {
  /*
  --inset: var(--s-xl);
  --outset: var(--s-md);
  */
  box-sizing: border-box;
  padding: var(--inset);
  margin: var(--outset);
}

.layout--center {
  --outset: 0 auto;
  max-width: var(--screen);
}
.layout--large {
  --outset: 0 auto;
  max-width: var(--screen-l);
}
.layout--full {
  --inset: 0;
}

/* $Breakpoints
   ==================================== */

@mixin bp($point) {
  @if $point == large {
    @media screen and (width > 1024px) {
      @content;
    }
  } @else if $point == medium {
    @media screen and (768px <= width <= 1024px) {
      @content;
    }
  } @else if $point == small {
    @media screen and (width < 768px) {
      @content;
    }
  } @else if $point == medium/large {
    @media screen and (width >= 768px) {
      @content;
    }
  }
}

// @use "../../styles/abstracts/index.scss" as a;
// @include a.bp(medium) {}

// add containers bp

/* $Flex
   ==================================== */

// OK
%flex-main {
  display: flex;
  flex-wrap: wrap;
  justify-content: var(--justify);
  align-items: center;
  gap: var(--gap);
}

%flex-large {
  @include bp(large) {
    display: flex;
    flex-wrap: wrap;
    justify-content: var(--justify);
    align-items: center;
    gap: var(--gap);
  }
}

// for auto cols design
%flex-auto {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gap);
  justify-content: var(--justify);
  > :where(*) {
    flex: 1 1 var(--width);
  }
}

%flex-mobile {
  display: flex;
  flex-direction: column;
  gap: var(--gap);
  justify-content: var(--justify);
  @include bp(medium/large) {
    flex-direction: row;
    flex-wrap: wrap;
  }
}

/* $Grid
   ==================================== */

// basic grid layout
%grid {
  display: grid;
  grid-template-columns: repeat(var(--cols), 1fr);
  grid-template-rows: repeat(var(--rows), 1fr);
  gap: var(--gap);
}

// for static cols design
%grid-cols {
  display: grid;
  grid-template-columns: repeat(var(--cols), 1fr);
  grid-template-rows: repeat(var(--rows), 1fr);
  gap: var(--gap);

  max-height: 100%;
  > :where(*) {
    max-height: var(--height);
  }
}

/* .gallery-container {
  --height: 400px;
  --rows: auto;
  @extend %grid-cols;
  @include a.bp(medium) {
    --cols: 2;
  }
  @include a.bp(large) {
    --cols: 3;
  }
} */

// for auto cols design
%grid-auto {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(min(var(--width), 100%), 1fr));
  gap: var(--gap);
  > :where(*) {
    max-height: var(--height);
  }
}

/*
.gallery-container {
  --width: 400px;
  --height: 400px;
  @extend %grid-auto;
}
*/

%grid-75 {
  display: grid;
  gap: var(--gap);
  grid-template-columns: auto 1fr; // 3fr 1fr
}

%grid-areas {
  display: grid;
  gap: var(--gap);
  grid-template-columns: 2fr 1fr;
  grid-template-rows: 1fr auto;
  grid-template-areas:
    "list image"
    "text text";
}

// grid-area: text;

// to test for a card with img
.media {
  display: grid;
  gap: var(--gap);
  grid-template-columns: fit-content(200px) 1fr;
  grid-template-rows: 1fr auto;
  grid-template-areas:
    "image content"
    "image footer";
  margin-bottom: 4em;
}

%grid-place {
  /*   --cols: 12;
  --rows: auto; */
  display: grid;
  gap: var(--gap);
  grid-template-columns: repeat(var(--cols), 1fr);
  grid-template-rows: repeat(var(--rows), 1fr);
  width: 100%;

  &__item-l {
    grid-area: 1 / 1 / 3 / 2; // rs / cs / re / ce
    place-self: auto;
  }
  &__item-t {
    grid-area: 1 / 2 / 2 / 3;
  }
  &__item-b {
    grid-area: 2 / 2 / 3 / 3;
  }
}

.grid-auto-fit {
  --grid-min-col-size: 400px;
  --grid-flow-spacing: 2rem;
  display: grid;
  gap: var(--gap);
  grid-template-columns: repeat(
    auto-fit,
    minmax(min(var(--grid-min-col-size), 100%), 1fr)
  );
  gap: var(--grid-flow-spacing), 1rem;
}

.container {
  container: container-grid / inline-size;
}

.grid-3 {
  display: grid;
  gap: var(--gap);

  @container container-grid (width > calc(170px * 3)) {
    grid-template-columns: repeat(3, 1fr);
  }
}

.calendar {
  display: grid;
  gap: var(--gap);
  grid-template-columns: repeat(7, 1fr);
  > :where(div) {
    justify-self: stretch;
  }
}

/* $Helpers
   ==================================== */

%grid--centered {
  display: grid;
  place-content: center;
  text-align: center;
}

%flex--centered {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

%flex--self {
  margin-left: auto;
}

// Trick : apply space to a grid parent
.grid-parent {
  --inset: var(--s-base);
  height: 100%;
  box-sizing: content-box;
}
